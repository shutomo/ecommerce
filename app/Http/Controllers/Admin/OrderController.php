<?phpnamespace App\Http\Controllers\Admin;use Illuminate\Http\Request;use App\Http\Controllers\Controller;use App\Models\Order;use App\Models\Order_item;use Auth;class OrderController extends Controller{    /**     * Display a listing of the resource.     *     * @return \Illuminate\Http\Response     */    public function __construct()    {        $this->middleware('auth');        $this->viewPrefix = 'order';        $this->title = 'List Orders';        $this->menu = 'Orders';    }    public function prefix($param = null)    {        $data['title'] = $this->title;        $data['menu'] = $this->menu;        if(isset($param)){            foreach ($param as $index => $value) {                $data[$index] = $value;            }        }        return $data;    }    public function index()    {        $data['orders'] = Order::where('user_id', '=', Auth::user()->id)->get();        return view($this->viewPrefix.'.index', $this->prefix($data));    }    /**     * Show the form for creating a new resource.     *     * @return \Illuminate\Http\Response     */    public function create()    {        $cart = session()->get('cart');        if ($cart)             return view($this->viewPrefix.'.create', $this->prefix());        else            return redirect('/')->with('message','Anda harus belanja terlebih dahulu');    }    /**     * Store a newly created resource in storage.     *     * @param  \Illuminate\Http\Request  $request     * @return \Illuminate\Http\Response     */    public function store(Request $request)    {        $this->validate(request(),[            'shipping_address'=>'required',            'zip_code'=>'required|integer'        ]);        $cart = session()->get('cart');        $total_price = 0;        foreach ($cart as $id => $product) {            $total_price += $product['price'] * $product['qty'];        }        $order = new Order();        $order->user_id = Auth::user()->id;        $order->status = 'PENDING';        $order->shipping_address = $request->shipping_address;        $order->zip_code = $request->zip_code;        $order->total_price = $total_price;        $order->save();        foreach ($cart as $id => $product) {            $orderItem = new Order_item();            $orderItem->order_id = $order->id;            $orderItem->product_id = $id;            $orderItem->qty = $product['qty'];            $orderItem->price = $product['price'];            $orderItem->save();        }        session()->forget('cart');        return redirect(route('admin.orders.show', ['id'=>$order->id]))->with('success', 'Order berhasil di simpan');    }    /**     * Display the specified resource.     *     * @param  int  $id     * @return \Illuminate\Http\Response     */    public function show($id)    {        $data['order'] = Order::find($id);        $data['title'] = "Detail Order";        if($data['order'])            return view($this->viewPrefix.'.show', $this->prefix($data));        else            return redirect(route('admin.orders'))->with('errors', 'Order tidak ditemukan');    }    /**     * Show the form for editing the specified resource.     *     * @param  int  $id     * @return \Illuminate\Http\Response     */    public function edit($id)    {        //    }    /**     * Update the specified resource in storage.     *     * @param  \Illuminate\Http\Request  $request     * @param  int  $id     * @return \Illuminate\Http\Response     */    public function update(Request $request, $id)    {        //    }    /**     * Remove the specified resource from storage.     *     * @param  int  $id     * @return \Illuminate\Http\Response     */    public function destroy($id)    {        //    }}